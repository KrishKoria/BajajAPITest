spring.application.name=BajajApiTest

# Webhook generation configuration (step 1)
webhook.generate.enabled=true
# webhook.generate.url can be overridden; default set in properties class.
#webhook.generate.url=https://bfhldevapigw.healthrx.co.in/hiring/generateWebhook/JAVA
#webhook.generate.name=John Doe
#webhook.generate.reg-no=REG12347
#webhook.generate.email=john@example.com

# Final solution submission (step 4)
# Automatic POST of final SQL query to the hiring API.
solution.submit.enabled=true
# Endpoint (default already set):
# solution.submit.url=https://bfhldevapigw.healthrx.co.in/hiring/testWebhook/JAVA
# Provide the derived final SQL query below (single line). Replace this placeholder with your actual solution.
solution.submit.final-query=SELECT e1.EMP_ID, e1.FIRST_NAME, e1.LAST_NAME, d.DEPARTMENT_NAME, COUNT(e2.EMP_ID) AS YOUNGER_EMPLOYEES_COUNT FROM EMPLOYEE e1 JOIN DEPARTMENT d ON e1.DEPARTMENT = d.DEPARTMENT_ID LEFT JOIN EMPLOYEE e2 ON e1.DEPARTMENT = e2.DEPARTMENT AND e2.DOB > e1.DOB GROUP BY e1.EMP_ID, e1.FIRST_NAME, e1.LAST_NAME, d.DEPARTMENT_NAME ORDER BY e1.EMP_ID DESC;
# Optional delay (ms) after startup before submitting (e.g. allow webhook events to arrive)
# solution.submit.delay-ms=0
# How long to wait for JWT token availability (ms)
# solution.submit.wait-for-token-timeout-ms=10000
# Poll interval while waiting for token (ms)
# solution.submit.wait-for-token-poll-ms=300
